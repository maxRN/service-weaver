// go:build !ignoreWeaverGen

package main

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)
var _ codegen.LatestVersion = codegen.Version[[0][10]struct{}]("You used 'weaver generate' codegen version 0.10.0, but you built your code with an incompatible weaver module version. Try upgrading 'weaver generate' and re-running it.")

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/ServiceWeaver/weaver/Main",
		Iface: reflect.TypeOf((*weaver.Main)(nil)).Elem(),
		Impl:  reflect.TypeOf(app{}),
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return main_local_stub{impl: impl.(weaver.Main), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any { return main_client_stub{stub: stub} },
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return main_server_stub{impl: impl.(weaver.Main), addLoad: addLoad}
		},
		RefData: "⟦48310d57:wEaVeReDgE:github.com/ServiceWeaver/weaver/Main→weaver-microservice/Worker⟧\n",
	})
	codegen.Register(codegen.Registration{
		Name:        "weaver-microservice/Worker",
		Iface:       reflect.TypeOf((*Worker)(nil)).Elem(),
		Impl:        reflect.TypeOf(worker{}),
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return worker_local_stub{impl: impl.(Worker), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return worker_client_stub{stub: stub, workMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "weaver-microservice/Worker", Method: "Work"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return worker_server_stub{impl: impl.(Worker), addLoad: addLoad}
		},
		RefData: "",
	})
}

// Local stub implementations.

type main_local_stub struct {
	impl   weaver.Main
	tracer trace.Tracer
}

type worker_local_stub struct {
	impl   Worker
	tracer trace.Tracer
}

func (s worker_local_stub) Work(ctx context.Context, a0 WorkObject) (r0 WorkObject, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "main.Worker.Work", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Work(ctx, a0)
}

// Client stub implementations.

type main_client_stub struct {
	stub codegen.Stub
}

type worker_client_stub struct {
	stub        codegen.Stub
	workMetrics *codegen.MethodMetrics
}

func (s worker_client_stub) Work(ctx context.Context, a0 WorkObject) (r0 WorkObject, err error) {
	// Update metrics.
	start := time.Now()
	s.workMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "main.Worker.Work", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.workMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.workMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_WorkObject_adafbbe3(&a0)
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.workMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.workMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	(&r0).WeaverUnmarshal(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type main_server_stub struct {
	impl    weaver.Main
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s main_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	default:
		return nil
	}
}

type worker_server_stub struct {
	impl    Worker
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s worker_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Work":
		return s.work
	default:
		return nil
	}
}

func (s worker_server_stub) work(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 WorkObject
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.Work(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	(r0).WeaverMarshal(enc)
	enc.Error(appErr)
	return enc.Data(), nil
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = &WorkObject{}

func (x *WorkObject) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("WorkObject.WeaverMarshal: nil receiver"))
	}
	enc.Int(x.id)
	enc.String(x.action)
	enc.String(x.message)
}

func (x *WorkObject) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("WorkObject.WeaverUnmarshal: nil receiver"))
	}
	x.id = dec.Int()
	x.action = dec.String()
	x.message = dec.String()
}

// Size implementations.

// serviceweaver_size_WorkObject_adafbbe3 returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_WorkObject_adafbbe3(x *WorkObject) int {
	size := 0
	size += 0
	size += 8
	size += (4 + len(x.action))
	size += (4 + len(x.message))
	return size
}
